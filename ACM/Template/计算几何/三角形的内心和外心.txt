#include<cstdio>
#include<cmath>
struct point
{
    double x,y;
};
point A,B,C;
double L(point a,point b)
{
    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
double S(point a,point b,point c)
{
    return fabs((c.x-a.x)*(b.y-a.y)-(b.x-a.x)*(c.y-a.y))/2.0;
}
void inner()
{
    double s,r,a,b,c,angA,angB,angC,p1,p2,p3,f1,f2;
    double xa,ya,xb,yb,xc,yc;
    double ansx,ansy;
    a=L(A,B);b=L(B,C);c=L(C,A);
    s=S(A,B,C);
    r=s*2.0/(a+b+c);
    angA=acos((a*a+c*c-b*b)/(2.0*a*c));
    angB=acos((b*b+a*a-c*c)/(2.0*b*a));
    angC=acos((c*c+b*b-a*a)/(2.0*c*b));
    p1=sin(angA/2.0);
    p2=sin(angB/2.0);
    p3=sin(angC/2.0);
    xa=A.x,ya=A.y,xb=B.x,yb=B.y,xc=C.x,yc=C.y;
    f1=((r/p2)*(r/p2)-(r/p1)*(r/p1)+xa*xa+ya*ya-xb*xb-yb*yb)/2.0;
    f2=((r/p3)*(r/p3)-(r/p1)*(r/p1)+xa*xa+ya*ya-xc*xc-yc*yc)/2.0;
    ansx=(f1*(ya-yc)-f2*(ya-yb))/((xa-xb)*(ya-yc)-(xa-xc)*(ya-yb));
    ansy=(f1*(xa-xc)-f2*(xa-xb))/((ya-yb)*(xa-xc)-(ya-yc)*(xa-xb));
    printf("%lf %lf\n",ansx,ansy);
}
void outer()
{
    double x1=A.x,y1=A.y,x2=B.x,y2=B.y,x3=C.x,y3=C.y;
    double ansx,ansy;
    ansx=((x1-x2)*(x1+x2)/(2*y1-2*y2)-(x3-x2)*(x3+x2)/(2*y3-2*y2)+(y1+y2)/2-(y3+y2))/
        ((x1-x2)/(y1-y2)-(x3-x2)/(y3-y2));
    ansy=((y1-y2)*(y1+y2)/(2*x1-2*x2)-(y3-y2)*(y3+y2)/(2*x3-2*x2)+(x1+x2)/2-(x3+x2))/
        ((y1-y2)/(x1-x2)-(y3-y2)/(x3-x2));
    printf("%lf %lf\n",ansx,ansy);
}
int main()
{
    scanf("%lf%lf%lf%lf%lf%lf",&A.x,&A.y,&B.x,&B.y,&C.x,&C.y);
    return 0;
}




#include <math.h>
#include<cstdio>
struct point{double x,y;};
struct line{point a,b;};

double distance(point p1,point p2){
return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}

point intersection(line u,line v){
point ret=u.a;
double t=((u.a.x-v.a.x)*(v.a.y-v.b.y)-(u.a.y-v.a.y)*(v.a.x-v.b.x))
/((u.a.x-u.b.x)*(v.a.y-v.b.y)-(u.a.y-u.b.y)*(v.a.x-v.b.x));
ret.x+=(u.b.x-u.a.x)*t;
ret.y+=(u.b.y-u.a.y)*t;
return ret;
}

//外心
point circumcenter(point a,point b,point c){
line u,v;
u.a.x=(a.x+b.x)/2;
u.a.y=(a.y+b.y)/2;
u.b.x=u.a.x-a.y+b.y;
u.b.y=u.a.y+a.x-b.x;
v.a.x=(a.x+c.x)/2;
v.a.y=(a.y+c.y)/2;
v.b.x=v.a.x-a.y+c.y;
v.b.y=v.a.y+a.x-c.x;
return intersection(u,v);
}

//内心
point incenter(point a,point b,point c){
line u,v;
double m,n;
u.a=a;
m=atan2(b.y-a.y,b.x-a.x);
n=atan2(c.y-a.y,c.x-a.x);
u.b.x=u.a.x+cos((m+n)/2);
u.b.y=u.a.y+sin((m+n)/2);
v.a=b;
m=atan2(a.y-b.y,a.x-b.x);
n=atan2(c.y-b.y,c.x-b.x);
v.b.x=v.a.x+cos((m+n)/2);
v.b.y=v.a.y+sin((m+n)/2);
return intersection(u,v);
}

//垂心
point perpencenter(point a,point b,point c){
line u,v;
u.a=c;
u.b.x=u.a.x-a.y+b.y;
u.b.y=u.a.y+a.x-b.x;
v.a=b;
v.b.x=v.a.x-a.y+c.y;
v.b.y=v.a.y+a.x-c.x;
return intersection(u,v);
}

//重心
//到三角形三顶点距离的平方和最小的点
//三角形内到三边距离之积最大的点
point barycenter(point a,point b,point c){
line u,v;
u.a.x=(a.x+b.x)/2;
u.a.y=(a.y+b.y)/2;
u.b=c;
v.a.x=(a.x+c.x)/2;
v.a.y=(a.y+c.y)/2;
v.b=b;
return intersection(u,v);
}

//费马点
//到三角形三顶点距离之和最小的点
point fermentpoint(point a,point b,point c){
point u,v;
double step=fabs(a.x)+fabs(a.y)+fabs(b.x)+fabs(b.y)+fabs(c.x)+fabs(c.y);
int i,j,k;
u.x=(a.x+b.x+c.x)/3;
u.y=(a.y+b.y+c.y)/3;
while (step>1e-10)
for (k=0;k<10;step/=2,k++)
for (i=-1;i<=1;i++)
for (j=-1;j<=1;j++){
v.x=u.x+step*i;
v.y=u.y+step*j;
if (distance(u,a)+distance(u,b)+distance(u,c)>distance(v,a)+distance(v,b)+distance(v,c))
u=v;
}
return u;
}

